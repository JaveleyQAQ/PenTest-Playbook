#urlList= """
#/AboutChinaPost
#/phbx/newMy/media/ebizDoc/getPolicyUrl
#/a
#"""
urlList = """
/AboutChinaPost
/RegistrationProtocol
/a/b
/a/i
/address/getAddressInfo
/api/v1
/assets/
/autograph
"""

def normalize_url(url):
    url = re.sub(r'/+', '/', url)
    if not url.startswith('/'):
        url = '/' + url
    return url

urls = [normalize_url(line.strip()) for line in urlList.strip().split('\n') if line.strip()]
directories = []
api_paths = []
combinations = set()

for url in urls:
    if url.count('/') > 2:
        api_paths.append(url)
        combinations.add(url)
    else:
        directories.append(url)

for dir1 in directories:
    for dir2 in directories:
        if dir1 != dir2:
            combination = dir1.rstrip('/') + '/' + dir2.lstrip('/')
            combinations.add(combination)

for dir in directories:
    for api_path in api_paths:
        combination = dir.rstrip('/') + '/' + api_path.lstrip('/')
        combinations.add(combination)

def sort_key(combination):
    return combination.count('/'), combination

sorted_combinations = sorted(combinations, key=sort_key)

def ext_url(url):
    if url.startswith("http://"):
        url = url[7:]
    elif url.startswith("https://"):
        url = url[8:]
    if ':' in url:
        url = url.split(':')[0]
    return url

def queueRequests(target, wordlists):
    #global engine
    global host
    host = target.endpoint
    engine = RequestEngine(endpoint=target.endpoint,
                           timeout=5,
                           concurrentConnections=5,
                           requestsPerConnection=50,
                           pipeline=False
                           )

    for combo in sorted_combinations:
        engine.queue(target.req, combo, label=combo)
        #print(combo)
@FilterStatus(400,404,304)
def handleResponse(req, interesting):
    #global engine
    global host
    host=ext_url(host)
    table.add(req)
    if req.status == 405:
        change_req = r'''POST {} HTTP/1.1
Host: {}
Content-Type: application/json
Accept: application/json

{{}}
    '''.format(req.label, host)
        req.engine.queue(change_req,label="change_req: "+str(req.label))
